{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","Empty","sortField","setSortField","isReversed","setReverse","visibleGoods","goods","preparedGoods","sort","goodA","goodB","Name","localeCompare","Length","length","reverse","getPreparedGoods","className","onClick","type","cn","currentState","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,gBAAAA,E,UAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAUI,OAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAiCH,oBAAS,GAA1C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,WAEPI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAAUe,KACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAUiB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMcS,CAAiBnB,EAAiB,CACrDI,YACAE,eAQF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAaN,EAAUe,OACtCQ,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,WAAYnB,IAAcL,EAAUe,OAJxC,iCAUA,wBACEO,QAAS,kBAAMhB,EAAaN,EAAUiB,SACtCM,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,WAAYnB,IAAcL,EAAUiB,SAJxC,4BAUA,wBACEK,QAAS,kBAAMd,GAAW,SAAAiB,GAAY,OAAKA,MAC3CF,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAajB,IAJjB,sBAUEF,GAAaE,IACb,wBACEe,QAxCI,WACZhB,EAAaN,EAAUI,OACvBI,GAAW,IAuCHe,KAAK,SACLF,UAAU,4BAHZ,sBAWJ,6BACGZ,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCnHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7f535605.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  Name = 'name',\n  Length = 'length',\n  Empty = '',\n}\n\ninterface FilterParam {\n  sortField: SortField,\n  isReversed: boolean,\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReversed }: FilterParam,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((goodA, goodB) => {\n      switch (sortField) {\n        case SortField.Name:\n          return goodA.localeCompare(goodB);\n\n        case SortField.Length:\n          return goodA.length - goodB.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.Empty);\n  const [isReversed, setReverse] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReversed,\n  });\n\n  const reset = () => {\n    setSortField(SortField.Empty);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortField.Name)}\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortField.Name,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortField.Length)}\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortField.Length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReverse(currentState => !currentState)}\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            onClick={reset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}